package com.apress.springrecipes.cotroller;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import com.apress.springrecipes.domain.PeriodicReservation;
import com.apress.springrecipes.domain.Player;
import com.apress.springrecipes.service.ReservationService;

@Controller
@RequestMapping("/periodicReservationForm")
@SessionAttributes("reservation")
public class PeriodReservationController {
	private final Map<Integer, String> pageForms = new HashMap<>(3);
	private final ReservationService reservationService;
	
	public PeriodReservationController(ReservationService reservationService) {
		this.reservationService = reservationService;
	}
	
	@PostConstruct
	public void initialize() {
		pageForms.put(0, "reservationCourtForm");
		pageForms.put(1, "reservationTimeForm");
		pageForms.put(2, "reservationPlayerForm");
	}
	
	@GetMapping
	public String setupForm(Model model) {
		PeriodicReservation reservation = new PeriodicReservation();
		reservation.setPlayer(new Player());
		model.addAttribute("reservation", reservation);
		return "reservationCourtForm";
	}
	
	@PostMapping(params = {"_cancel"})
	public String cancelForm(@RequestParam("_page")int currentPage) {
		return pageForms.get(currentPage);
	}
	
	@PostMapping(params = {"_finish"})
	public String completeForm(
			@ModelAttribute("reservation") PeriodicReservation reservation, 
			BindingResult result, 
			SessionStatus status,
			@RequestParam("_page") int currentPage) {
		
		if (!result.hasErrors()) {
			reservationService.makePeriodic(reservation);
			status.setComplete();
			return "redirect:reservationSuccess";
		} else {
			return pageForms.get(currentPage);
		}
	}
	
	@PostMapping
	public String submitForm(
			HttpServletRequest request,
			@ModelAttribute("reservation") PeriodicReservation reservation, 
			BindingResult result, 
			@RequestParam("_page") int currentPage) {
		
		int targetPage = getTargetPage(request, "_target", currentPage);
		
	}
	
	private int getTargetPage(HttpServletRequest request, String paramPrefix, int currentPage) {
		Enumeration<String> paramNames = request.getParameterNames();
		while (paramNames.hasMoreElements()) {
			
		}
	}
}
